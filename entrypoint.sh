#!/bin/bash

set -e

# Aguarda o PostgreSQL estar pronto
echo "ğŸ”„ Aguardando PostgreSQL..."
while ! nc -z db 5432; do
    sleep 0.1
done
echo "âœ… PostgreSQL estÃ¡ pronto!"

# ConfiguraÃ§Ã£o inicial do Laravel
echo "ğŸš€ Iniciando setup do Laravel..."

# Verifica e configura o ambiente principal
if [ ! -f .env ]; then
    echo "Criando arquivo .env..."
    cp .env.example .env
fi

# Verifica e configura o ambiente de testes
if [ ! -f .env.testing ]; then
    echo "Criando arquivo .env.testing..."
    cp .env.example .env.testing
    sed -i 's/DB_DATABASE=.*/DB_DATABASE=testing/g' .env.testing
fi

# Instala as dependÃªncias do Composer
echo "ğŸ“¦ Instalando dependÃªncias..."
composer install --no-interaction --optimize-autoloader

# Garante as permissÃµes corretas
echo "ğŸ”’ Configurando permissÃµes..."
chown -R www-data:www-data storage
chmod -R 775 storage
chown -R www-data:www-data bootstrap/cache
chmod -R 775 bootstrap/cache

# Gera a chave da aplicaÃ§Ã£o se nÃ£o existir
php artisan key:generate --no-interaction --force

# Configura o JWT para ambiente principal
echo "ğŸ”‘ Configurando JWT para ambiente principal..."
php artisan jwt:secret --force

# Configura o JWT para ambiente de testes
echo "ğŸ”‘ Configurando JWT para ambiente de testes..."
php artisan jwt:secret --force --env=testing


# Executa as migraÃ§Ãµes no ambiente principal
echo "ğŸ”„ Executando migraÃ§Ãµes no ambiente principal..."
php artisan migrate --force

# Otimiza a aplicaÃ§Ã£o
echo "âš¡ Otimizando aplicaÃ§Ã£o..."
php artisan optimize

# Gera a documentaÃ§Ã£o Swagger
echo "ğŸ“š Gerando documentaÃ§Ã£o Swagger..."
php artisan l5-swagger:generate

# Configura permissÃµes para a documentaÃ§Ã£o
chmod -R 777 storage/api-docs

echo "âœ… DocumentaÃ§Ã£o Swagger gerada com sucesso!"
echo "âœ… Setup do Laravel concluÃ­do!"

# Inicia o servidor PHP-FPM
exec php-fpm
