services:
  # Cloud SQL Proxy para conexão segura com Google Cloud SQL
  cloud-sql-proxy:
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.0
    container_name: utfpets-cloud-sql-proxy
    restart: unless-stopped
    command:
      - "--port=5432"
      - "--address=0.0.0.0"
      - "${CLOUD_SQL_CONNECTION_NAME}"
    volumes:
      - ./storage/keys/gcp-service-account.json:/secrets/gcp-service-account.json:ro
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp-service-account.json
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 5432 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: utfpets-app
    restart: unless-stopped
    environment:
      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_URL=${APP_URL}
      - CLOUD_SQL_CONNECTION_NAME=${CLOUD_SQL_CONNECTION_NAME}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_TTL=${JWT_TTL}
    volumes:
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    expose:
      - "9000"
    networks:
      - app-network
    depends_on:
      - cloud-sql-proxy
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:1.24-alpine
    container_name: utfpets-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/public:ro
      - ./nginx/api.utfpets.online-http-only.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot:latest
    container_name: utfpets-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  # Swagger UI para documentação da API
  swagger-ui:
    image: docker.swagger.io/swaggerapi/swagger-ui:latest
    container_name: utfpets-swagger-ui
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8080"
    environment:
      - URL=/api-docs.json
      - URLS_PRIMARY_NAME=UTFPets API
      - BASE_URL=/swagger
    depends_on:
      - nginx
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true

networks:
  app-network:
    driver: bridge
