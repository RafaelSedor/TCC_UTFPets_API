name: Deploy to Production

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: tccutfpets
  VM_NAME: tccutfpets
  VM_ZONE: southamerica-east1-b
  APP_DIR: /opt/utfpets
  BACKUP_DIR: /opt/utfpets_backups

jobs:
  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Prepare deployment
        run: |
          echo "üöÄ Starting deployment to VM ${VM_NAME}..."
          echo "üì¶ Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"

      - name: Prepare VM and create backup
        run: |
          echo "üîß Preparing VM and creating backup..."

          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              set -e

              echo 'üìÅ Creating application directory...'
              sudo mkdir -p ${APP_DIR}
              sudo chown \$USER:\$USER ${APP_DIR}

              echo 'üìÅ Creating backup directory...'
              sudo mkdir -p ${BACKUP_DIR}

              if [ -d ${APP_DIR} ] && [ \"\$(ls -A ${APP_DIR})\" ]; then
                echo '‚è∏Ô∏è  Stopping containers...'
                cd ${APP_DIR}
                docker-compose down || true

                echo 'üíæ Creating backup...'
                BACKUP_NAME=utfpets_\$(date +%Y%m%d_%H%M%S)
                sudo cp -r ${APP_DIR} ${BACKUP_DIR}/\${BACKUP_NAME}
                echo \"‚úÖ Backup created: \${BACKUP_NAME}\"
              else
                echo '‚ÑπÔ∏è  First deployment - no backup needed'
              fi
            "

      - name: Copy files to VM
        run: |
          echo "üìÅ Copying application files..."

          # Criar lista de exclus√µes (n√£o sobrescrever .env, vendor, etc)
          cat > /tmp/rsync-exclude.txt <<EOF
          .git
          .github
          node_modules
          vendor
          .env
          .env.example
          storage/logs/*
          storage/framework/cache/*
          storage/framework/sessions/*
          storage/framework/views/*
          storage/keys/gcp-service-account.json
          bootstrap/cache/*.php
          tests
          phpunit.xml
          .gitignore
          .editorconfig
          EOF

          # Copiar arquivos excluindo os listados
          gcloud compute scp \
            --recurse \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --compress \
            ./* ${VM_NAME}:${APP_DIR}/ \
            2>&1 | grep -v "Warning: Permanently added" | grep -v ".env" | grep -v "vendor" || true

      - name: Setup and start application
        run: |
          echo "‚öôÔ∏è  Setting up and starting application..."

          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              set -e
              cd ${APP_DIR}

              echo 'üìù Checking .env file...'
              if [ ! -f .env ]; then
                echo '‚ÑπÔ∏è  Creating .env from .env.example'
                cp .env.example .env
                echo '‚ö†Ô∏è  WARNING: Configure .env with production credentials!'
              fi

              echo 'üîê Setting permissions...'
              chmod +x entrypoint.sh || true
              sudo chown -R 1000:1000 storage bootstrap/cache 2>/dev/null || true
              sudo chmod -R 775 storage bootstrap/cache 2>/dev/null || true

              echo 'üê≥ Building and starting containers...'
              docker-compose up -d --build

              echo '‚è≥ Waiting for containers to be ready...'
              timeout 60 bash -c 'until docker-compose exec -T app php -r \"echo \"\"PHP OK\n\"\";\" 2>/dev/null; do echo \"Waiting for app...\"; sleep 2; done'

              echo 'üóÉÔ∏è  Running migrations...'
              docker-compose exec -T app php artisan migrate --force || echo 'Warning: Migrations failed'

              echo '‚ö° Optimizing application...'
              docker-compose exec -T app php artisan config:cache || true
              docker-compose exec -T app php artisan route:cache || true
              docker-compose exec -T app php artisan view:cache || true

              echo 'üìä Container status:'
              docker-compose ps
            "

      - name: Health check
        run: |
          echo "üè• Performing health check..."

          MAX_ATTEMPTS=10
          ATTEMPT=0

          while [ \$ATTEMPT -lt \$MAX_ATTEMPTS ]; do
            ATTEMPT=\$((ATTEMPT + 1))
            echo "Attempt \$ATTEMPT/\$MAX_ATTEMPTS..."

            if gcloud compute ssh ${VM_NAME} \
              --zone=${VM_ZONE} \
              --project=${PROJECT_ID} \
              --command="curl -f -s http://localhost:8080/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi

            if [ \$ATTEMPT -lt \$MAX_ATTEMPTS ]; then
              sleep 5
            fi
          done

          echo "‚ùå Health check failed after \$MAX_ATTEMPTS attempts"
          exit 1

      - name: Cleanup old backups
        if: success()
        run: |
          echo "üßπ Cleaning up old backups..."

          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              sudo mkdir -p ${BACKUP_DIR}
              cd ${BACKUP_DIR}
              ls -dt utfpets_* 2>/dev/null | tail -n +6 | xargs sudo rm -rf || true
              echo \"Kept last 5 backups\"
            "

      - name: Deployment summary
        if: always()
        run: |
          echo "========================================="
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
            echo "========================================="
            echo "üåê API: http://34.39.150.157:8080"
            echo "üìö Swagger: http://34.39.150.157:8080/swagger"
            echo "üíö Health: http://34.39.150.157:8080/api/health"
            echo "========================================="
          else
            echo "‚ùå DEPLOYMENT FAILED!"
            echo "========================================="
            echo "Check logs above for details"
            echo "To rollback, connect to VM and restore backup"
            echo "========================================="
            exit 1
          fi
