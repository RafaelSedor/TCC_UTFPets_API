name: Deploy to Production

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: tccutfpets
  VM_NAME: tccutfpets
  VM_ZONE: southamerica-east1-b
  APP_DIR: /opt/utfpets
  BACKUP_DIR: /opt/utfpets_backups

jobs:
  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Prepare deployment
        run: |
          echo "üöÄ Starting deployment to VM ${VM_NAME}..."
          echo "üì¶ Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"

      - name: Install Docker and prepare VM
        run: |
          echo "üîß Installing Docker and preparing VM..."

          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              set -e

              echo 'üì¶ Checking Docker installation...'
              if ! command -v docker &> /dev/null; then
                echo 'Installing Docker Engine...'
                sudo apt-get update -qq
                sudo apt-get install -y ca-certificates curl
                sudo install -m 0755 -d /etc/apt/keyrings
                sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
                sudo chmod a+r /etc/apt/keyrings/docker.asc
                echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \$(. /etc/os-release && echo \\\"\$VERSION_CODENAME\\\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update -qq
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
                sudo usermod -aG docker \$USER
                echo '‚úÖ Docker installed'
              else
                echo '‚úÖ Docker already installed'
              fi

              echo 'üìÅ Creating application directory...'
              sudo mkdir -p ${APP_DIR}
              sudo chown \$USER:\$USER ${APP_DIR}

              echo 'üìÅ Creating backup directory...'
              sudo mkdir -p ${BACKUP_DIR}

              if [ -d ${APP_DIR} ] && [ \"\$(ls -A ${APP_DIR})\" ] && command -v docker &> /dev/null; then
                echo '‚è∏Ô∏è  Stopping containers...'
                cd ${APP_DIR}
                docker compose down || true

                echo 'üíæ Creating backup...'
                BACKUP_NAME=utfpets_\$(date +%Y%m%d_%H%M%S)
                sudo cp -r ${APP_DIR} ${BACKUP_DIR}/\${BACKUP_NAME}
                echo \"‚úÖ Backup created: \${BACKUP_NAME}\"
              else
                echo '‚ÑπÔ∏è  First deployment - no backup needed'
              fi
            "

      - name: Copy files to VM
        run: |
          echo "üìÅ Copying application files..."

          # Criar lista de exclus√µes (n√£o sobrescrever .env, vendor, etc)
          cat > /tmp/rsync-exclude.txt <<EOF
          .git
          .github
          node_modules
          vendor
          .env
          .env.example
          storage/logs/*
          storage/framework/cache/*
          storage/framework/sessions/*
          storage/framework/views/*
          storage/keys/gcp-service-account.json
          bootstrap/cache/*.php
          tests
          phpunit.xml
          .gitignore
          .editorconfig
          EOF

          # Copiar arquivos excluindo os listados
          gcloud compute scp \
            --recurse \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --compress \
            ./* ${VM_NAME}:${APP_DIR}/ \
            2>&1 | grep -v "Warning: Permanently added" | grep -v ".env" | grep -v "vendor" || true

      - name: Create .env file
        run: |
          echo "üìù Creating .env file from GitHub Secrets..."

          cat > /tmp/.env <<'EOF'
          APP_NAME="${{ secrets.APP_NAME || 'UTFPets API' }}"
          APP_ENV="${{ secrets.APP_ENV || 'production' }}"
          APP_KEY="${{ secrets.APP_KEY }}"
          APP_DEBUG="${{ secrets.APP_DEBUG || 'false' }}"
          APP_URL="${{ secrets.APP_URL || 'http://34.39.150.157:8080' }}"

          LOG_CHANNEL="${{ secrets.LOG_CHANNEL || 'stack' }}"
          LOG_DEPRECATIONS_CHANNEL="${{ secrets.LOG_DEPRECATIONS_CHANNEL || 'null' }}"
          LOG_LEVEL="${{ secrets.LOG_LEVEL || 'debug' }}"

          DB_CONNECTION="${{ secrets.DB_CONNECTION || 'pgsql' }}"
          DB_HOST="${{ secrets.DB_HOST }}"
          DB_PORT="${{ secrets.DB_PORT || '5432' }}"
          DB_DATABASE="${{ secrets.DB_DATABASE }}"
          DB_USERNAME="${{ secrets.DB_USERNAME }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"

          BROADCAST_DRIVER="${{ secrets.BROADCAST_DRIVER || 'log' }}"
          CACHE_DRIVER="${{ secrets.CACHE_DRIVER || 'file' }}"
          FILESYSTEM_DISK="${{ secrets.FILESYSTEM_DISK || 'local' }}"
          QUEUE_CONNECTION="${{ secrets.QUEUE_CONNECTION || 'sync' }}"
          SESSION_DRIVER="${{ secrets.SESSION_DRIVER || 'file' }}"
          SESSION_LIFETIME="${{ secrets.SESSION_LIFETIME || '120' }}"

          MEMCACHED_HOST="${{ secrets.MEMCACHED_HOST || '127.0.0.1' }}"

          REDIS_HOST="${{ secrets.REDIS_HOST || '127.0.0.1' }}"
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD || 'null' }}"
          REDIS_PORT="${{ secrets.REDIS_PORT || '6379' }}"

          MAIL_MAILER="${{ secrets.MAIL_MAILER || 'smtp' }}"
          MAIL_HOST="${{ secrets.MAIL_HOST || 'mailpit' }}"
          MAIL_PORT="${{ secrets.MAIL_PORT || '1025' }}"
          MAIL_USERNAME="${{ secrets.MAIL_USERNAME || 'null' }}"
          MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD || 'null' }}"
          MAIL_ENCRYPTION="${{ secrets.MAIL_ENCRYPTION || 'null' }}"
          MAIL_FROM_ADDRESS="${{ secrets.MAIL_FROM_ADDRESS || 'hello@example.com' }}"
          MAIL_FROM_NAME="${{ secrets.MAIL_FROM_NAME || '${APP_NAME}' }}"

          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID || '' }}"
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}"
          AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}"
          AWS_BUCKET="${{ secrets.AWS_BUCKET || '' }}"
          AWS_USE_PATH_STYLE_ENDPOINT="${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT || 'false' }}"

          PUSHER_APP_ID="${{ secrets.PUSHER_APP_ID || '' }}"
          PUSHER_APP_KEY="${{ secrets.PUSHER_APP_KEY || '' }}"
          PUSHER_APP_SECRET="${{ secrets.PUSHER_APP_SECRET || '' }}"
          PUSHER_HOST="${{ secrets.PUSHER_HOST || '' }}"
          PUSHER_PORT="${{ secrets.PUSHER_PORT || '443' }}"
          PUSHER_SCHEME="${{ secrets.PUSHER_SCHEME || 'https' }}"
          PUSHER_APP_CLUSTER="${{ secrets.PUSHER_APP_CLUSTER || 'mt1' }}"

          VITE_APP_NAME="${{ secrets.VITE_APP_NAME || '${APP_NAME}' }}"
          VITE_PUSHER_APP_KEY="${{ secrets.VITE_PUSHER_APP_KEY || '${PUSHER_APP_KEY}' }}"
          VITE_PUSHER_HOST="${{ secrets.VITE_PUSHER_HOST || '${PUSHER_HOST}' }}"
          VITE_PUSHER_PORT="${{ secrets.VITE_PUSHER_PORT || '${PUSHER_PORT}' }}"
          VITE_PUSHER_SCHEME="${{ secrets.VITE_PUSHER_SCHEME || '${PUSHER_SCHEME}' }}"
          VITE_PUSHER_APP_CLUSTER="${{ secrets.VITE_PUSHER_APP_CLUSTER || '${PUSHER_APP_CLUSTER}' }}"

          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          JWT_TTL="${{ secrets.JWT_TTL || '60' }}"

          CLOUDINARY_URL="${{ secrets.CLOUDINARY_URL }}"
          CLOUDINARY_CLOUD_NAME="${{ secrets.CLOUDINARY_CLOUD_NAME }}"
          CLOUDINARY_API_KEY="${{ secrets.CLOUDINARY_API_KEY }}"
          CLOUDINARY_API_SECRET="${{ secrets.CLOUDINARY_API_SECRET }}"

          GOOGLE_CLOUD_PROJECT="${{ secrets.GOOGLE_CLOUD_PROJECT || 'tccutfpets' }}"
          GOOGLE_APPLICATION_CREDENTIALS="${{ secrets.GOOGLE_APPLICATION_CREDENTIALS || '/opt/utfpets/storage/keys/gcp-service-account.json' }}"
          CLOUD_SQL_CONNECTION_NAME="${{ secrets.CLOUD_SQL_CONNECTION_NAME || 'tccutfpets:southamerica-east1:tcc' }}"
          EOF

          gcloud compute scp /tmp/.env ${VM_NAME}:${APP_DIR}/.env \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID}

          rm /tmp/.env
          echo "‚úÖ .env file created on VM"

      - name: Setup GCP service account
        run: |
          echo "üîê Setting up GCP service account credentials..."

          # Create temp file with service account JSON
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-sa-key.json

          # Create keys directory on VM with proper permissions
          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              sudo mkdir -p ${APP_DIR}/storage/keys
              sudo chown \$USER:\$USER ${APP_DIR}/storage/keys
              sudo chmod 755 ${APP_DIR}/storage/keys
            "

          # Copy the service account key to VM (to home first, then move)
          gcloud compute scp /tmp/gcp-sa-key.json ${VM_NAME}:~/gcp-sa-key.json \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID}

          # Move to final location and set permissions
          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              mv ~/gcp-sa-key.json ${APP_DIR}/storage/keys/gcp-service-account.json
              chmod 600 ${APP_DIR}/storage/keys/gcp-service-account.json
              echo '‚úÖ Service account key configured'
            "

          # Cleanup local temp file
          rm /tmp/gcp-sa-key.json

      - name: Setup and start application
        run: |
          echo "‚öôÔ∏è  Setting up and starting application..."

          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              set -e
              cd ${APP_DIR}

              echo 'üîê Setting permissions...'
              chmod +x entrypoint.sh || true
              sudo chown -R 1000:1000 storage bootstrap/cache 2>/dev/null || true
              sudo chmod -R 775 storage bootstrap/cache 2>/dev/null || true

              echo 'üê≥ Building and starting containers...'
              docker compose up -d --build

              echo '‚è≥ Waiting for containers to be ready...'
              timeout 60 bash -c 'until docker compose exec -T app php -r \"echo 1;\" 2>/dev/null; do echo \"Waiting for app...\"; sleep 2; done'

              echo 'üóÉÔ∏è  Running migrations...'
              docker compose exec -T app php artisan migrate --force || echo 'Warning: Migrations failed'

              echo '‚ö° Optimizing application...'
              docker compose exec -T app php artisan config:cache || true
              docker compose exec -T app php artisan route:cache || true
              docker compose exec -T app php artisan view:cache || true

              echo 'üìä Container status:'
              docker compose ps
            "

      - name: Health check
        run: |
          echo "üè• Performing health check..."

          MAX_ATTEMPTS=10
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."

            if gcloud compute ssh ${VM_NAME} \
              --zone=${VM_ZONE} \
              --project=${PROJECT_ID} \
              --command="curl -f -s http://localhost:8080/api/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi

            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 5
            fi
          done

          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Cleanup old backups
        if: success()
        run: |
          echo "üßπ Cleaning up old backups..."

          gcloud compute ssh ${VM_NAME} \
            --zone=${VM_ZONE} \
            --project=${PROJECT_ID} \
            --command="
              sudo mkdir -p ${BACKUP_DIR}
              cd ${BACKUP_DIR}
              ls -dt utfpets_* 2>/dev/null | tail -n +6 | xargs sudo rm -rf || true
              echo \"Kept last 5 backups\"
            "

      - name: Deployment summary
        if: always()
        run: |
          echo "========================================="
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
            echo "========================================="
            echo "üåê API: http://34.39.150.157:8080"
            echo "üìö Swagger: http://34.39.150.157:8080/swagger"
            echo "üíö Health: http://34.39.150.157:8080/api/health"
            echo "========================================="
          else
            echo "‚ùå DEPLOYMENT FAILED!"
            echo "========================================="
            echo "Check logs above for details"
            echo "To rollback, connect to VM and restore backup"
            echo "========================================="
            exit 1
          fi
